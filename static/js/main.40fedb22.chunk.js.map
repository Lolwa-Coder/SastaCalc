{"version":3,"sources":["index.js"],"names":["s","Button","isOperator","val","isNaN","className","this","props","children","onClick","handleClick","React","Component","Welcome","clearInput","setState","input","addToInput","state","returnAns","eval","replace","previousNumber","currentNumber","operator","id","ReactDOM","render","document","getElementById"],"mappings":"q4CAGIA,EAAG,GACDC,O,igBACJC,WAAa,SAAAC,GACX,OAAQC,MAAMD,IAAgB,MAARA,GAAuB,MAARA,G,mJAGvC,WAAU,IAAD,OACP,OACE,qEACEE,UAAS,iBAAYC,KAAKJ,WAAWI,KAAKC,MAAMC,UAAY,GAAK,YACjEC,QAAS,kBAAM,EAAKF,MAAMG,YAAY,EAAKH,MAAMC,WAFnD,SAKGF,KAAKC,MAAMC,e,GAZCG,6CAAMC,WAiBrBC,Q,+SACJ,iBAAYN,OAAO,IAAD,kJAChB,yBAAMA,OADU,OASlBO,WAAa,WACX,OAAKC,SAAS,CAAEC,MAAO,MAVP,OAYlBC,WAAa,SAAAd,GACT,OAAKY,SAAS,CAAEC,MAAO,OAAKE,MAAMF,MAAMb,IACxCH,GAAKG,GAdS,OAgBjBgB,UAAY,WACXnB,EAAIoB,KAAKpB,EAAEqB,QAAQ,gBAAiB,KACnC,OAAKN,SAAS,CAACC,MAAMhB,KAhBpB,OAAKkB,MAAM,CACTF,MAAM,GACNM,eAAe,GACfC,cAAc,GACdC,SAAS,IANG,O,uJAuBlB,WACE,OACE,mEAAKC,GAAG,OAAR,UACE,kEAAKA,GAAG,MAAR,SAAenB,KAAKY,MAAMF,QAC1B,mEAAKS,GAAG,OAAR,UACC,2DAACxB,OAAD,CAAQS,YAAaJ,KAAKW,WAA1B,eACA,2DAAChB,OAAD,CAAQS,YAAaJ,KAAKW,WAA1B,eACA,2DAAChB,OAAD,CAAQS,YAAaJ,KAAKW,WAA1B,eACA,2DAAChB,OAAD,CAAQS,YAAaJ,KAAKW,WAA1B,kBAED,mEAAKQ,GAAG,OAAR,UACA,2DAACxB,OAAD,CAAQS,YAAaJ,KAAKW,WAA1B,eACC,2DAAChB,OAAD,CAAQS,YAAaJ,KAAKW,WAA1B,eACA,2DAAChB,OAAD,CAAQS,YAAaJ,KAAKW,WAA1B,eACA,2DAAChB,OAAD,CAAQS,YAAaJ,KAAKW,WAA1B,kBAED,mEAAKQ,GAAG,OAAR,UACA,2DAACxB,OAAD,CAAQS,YAAaJ,KAAKW,WAA1B,eACC,2DAAChB,OAAD,CAAQS,YAAaJ,KAAKW,WAA1B,eACA,2DAAChB,OAAD,CAAQS,YAAaJ,KAAKW,WAA1B,eACA,2DAAChB,OAAD,CAAQS,YAAaJ,KAAKW,WAA1B,kBAED,mEAAKQ,GAAG,OAAR,UACA,2DAACxB,OAAD,CAAQS,YAAaJ,KAAKW,WAA1B,eACC,2DAAChB,OAAD,CAAQS,YAAaJ,KAAKW,WAA1B,eACA,2DAAChB,OAAD,CAAQS,YAAaJ,KAAKa,UAA1B,eACA,2DAAClB,OAAD,CAAQS,YAAaJ,KAAKW,WAA1B,kBAED,kEAAKQ,GAAG,OAAR,SACE,2DAACxB,OAAD,CAAQS,YAAaJ,KAAKQ,WAA1B,4B,SArDYH,6CAAMC,WA6D5Bc,iDAASC,OACP,2DAACd,QAAD,IAEAe,SAASC,eAAe,W","file":"static/js/main.40fedb22.chunk.js","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nvar s =\"\";\nclass Button extends React.Component {\n  isOperator = val => {\n    return !isNaN(val) || val === \".\" || val === \"=\";\n  };\n\n  render() {\n    return( \n      <button\n        className={`button ${this.isOperator(this.props.children) ? \"\" : \"operator\"}`}\n        onClick={() => this.props.handleClick(this.props.children)}\n        \n      >\n        {this.props.children}\n      </button>\n    )\n  }\n}\nclass Welcome extends React.Component {\n  constructor(props){\n    super(props);\n      this.state={\n        input:\"\",\n        previousNumber:\"\",\n        currentNumber:\"\",\n        operator:\"\"\n      };\n  } \n  clearInput = () => {\n    this.setState({ input: \"\" });\n  };\n  addToInput = val =>{\n      this.setState({ input :this.state.input+val});\n      s= s+val;\n    }\n   returnAns = () =>{\n    s=  eval(s.replace(/[^-()\\d/*+.]/g, ''));\n     this.setState({input:s});\n    \n   } \n  \n  \n  render() {\n    return (\n      <div id=\"calc\">\n        <div id=\"ans\">{this.state.input}</div>\n        <div id=\"row1\">\n         <Button handleClick={this.addToInput}>7</Button>\n         <Button handleClick={this.addToInput}>8</Button>\n         <Button handleClick={this.addToInput}>9</Button>\n         <Button handleClick={this.addToInput}>/</Button>\n        </div>\n        <div id=\"row2\">\n        <Button handleClick={this.addToInput}>4</Button>\n         <Button handleClick={this.addToInput}>5</Button>\n         <Button handleClick={this.addToInput}>6</Button>\n         <Button handleClick={this.addToInput}>*</Button>\n        </div>\n        <div id=\"row3\">\n        <Button handleClick={this.addToInput}>1</Button>\n         <Button handleClick={this.addToInput}>2</Button>\n         <Button handleClick={this.addToInput}>3</Button>\n         <Button handleClick={this.addToInput}>+</Button>\n        </div>\n        <div id=\"row4\">\n        <Button handleClick={this.addToInput}>.</Button>\n         <Button handleClick={this.addToInput}>0</Button>\n         <Button handleClick={this.returnAns}>=</Button>\n         <Button handleClick={this.addToInput}>-</Button>\n        </div>\n        <div id=\"row5\">\n          <Button handleClick={this.clearInput} >CLEAR</Button>\n        </div>\n      </div>\n    )\n  }\n}\n\n\nReactDOM.render(\n  <Welcome />\n,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n\n"],"sourceRoot":""}